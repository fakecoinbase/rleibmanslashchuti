schema {
  query: Queries
  mutation: Mutations
  subscription: Subscriptions
}

scalar Long

enum UserStatus {
  InLobby
  Offline
  Playing
}

input ChannelIdInput {
  value: Int!
}

input UserIdInput {
  value: Int!
}

input UserInput {
  id: UserIdInput
  email: String!
  name: String!
  userStatus: UserStatus!
  currentChannelId: ChannelIdInput
  created: Long!
  lastUpdated: Long!
  lastLoggedIn: Long
  wallet: Float!
  deleted: Boolean!
}

type ChannelId {
  value: Int!
}

type ChatMessage {
  fromUser: User!
  msg: String!
  toUser: User
  date: Long!
}

type Mutations {
  say(msg: String!, toUser: UserInput): Boolean!
}

type Queries {

}

type Subscriptions {
  chatStream(value: Int!): ChatMessage!
}

type User {
  id: UserId
  email: String!
  name: String!
  userStatus: UserStatus!
  currentChannelId: ChannelId
  created: Long!
  lastUpdated: Long!
  lastLoggedIn: Long
  wallet: Float!
  deleted: Boolean!
}

type UserId {
  value: Int!
}