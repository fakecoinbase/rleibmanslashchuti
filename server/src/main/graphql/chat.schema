schema {
  query: Queries
  mutation: Mutations
  subscription: Subscriptions
}

scalar Long

enum UserStatus {
  Idle
  Invited
  Offline
  Playing
}

input ChannelIdInput {
  value: Int!
}

input UserInput {
  id: Int
  email: String!
  name: String!
  userStatus: UserStatus!
  created: Long!
  lastUpdated: Long!
  lastLoggedIn: Long
  active: Boolean!
  deleted: Boolean!
}

type ChannelId {
  value: Int!
}

type ChatMessage {
  fromUser: User!
  msg: String!
  channelId: ChannelId!
  toUser: User
  date: Long!
}

type Mutations {
  say(msg: String!, channelId: ChannelIdInput!, toUser: UserInput): Boolean!
}

type Queries {

}

type Subscriptions {
  chatStream(channelId: ChannelIdInput!, connectionId: String!): ChatMessage!
}

type User {
  id: Int
  email: String!
  name: String!
  userStatus: UserStatus!
  created: Long!
  lastUpdated: Long!
  lastLoggedIn: Long
  active: Boolean!
  deleted: Boolean!
}