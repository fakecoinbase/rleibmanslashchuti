schema {
  query: Queries
  mutation: Mutations
  subscription: Subscriptions
}

scalar Json

scalar Long

enum UserEventType {
  AbandonedGame
  Connected
  Disconnected
  JoinedGame
  Modified
}

enum UserStatus {
  Idle
  Offline
  Playing
}

input ConnectionIdInput {
  value: String!
}

input GameIdInput {
  value: Int!
}

input UserIdInput {
  value: Int!
}

type Mutations {
  newGame(satoshiPerPoint: Int!): Json
  joinRandomGame: Json
  abandonGame(value: Int!): Boolean
  inviteToGame(userId: UserIdInput!, gameId: GameIdInput!): Boolean
  acceptGameInvitation(value: Int!): Json
  declineGameInvitation(value: Int!): Boolean
  play(gameId: GameIdInput!, gameEvent: Json!): Boolean
}

type Queries {
  getGame(value: Int!): Json
  getGameForUser: Json
  getFriends: [User!]
  getGameInvites: [Json!]
  getLoggedInUsers: [User!]
}

type Subscriptions {
  gameStream(gameId: GameIdInput!, connectionId: ConnectionIdInput!): Json!
  userStream(value: String!): UserEvent!
}

type User {
  id: UserId
  email: String!
  name: String!
  userStatus: UserStatus!
  created: Long!
  lastUpdated: Long!
  lastLoggedIn: Long
  active: Boolean!
  deleted: Boolean!
}

type UserEvent {
  user: User!
  userEventType: UserEventType!
}

type UserId {
  value: Int!
}