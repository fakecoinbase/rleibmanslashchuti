schema {
  query: Queries
  mutation: Mutations
  subscription: Subscriptions
}

scalar Json

scalar Long

enum UserEventType {
  AbandonedGame
  Connected
  Disconnected
  JoinedGame
  Modified
}

enum UserStatus {
  InLobby
  Offline
  Playing
}

type ChannelId {
  value: Int!
}

type Mutations {
  newGame: Json
  joinRandomGame: Json
  abandonGame(value: Int!): Boolean
  play(gameEvent: Json!): Boolean
}

type Queries {
  getGame(value: Int!): Json
  getGameForUser: Json
  getFriends: [UserId!]
  getInvites: [Json!]
  getLoggedInUsers: [User!]
}

type Subscriptions {
  gameStream(value: Int!): Json!
  userStream: UserEvent!
}

type User {
  id: UserId
  email: String!
  name: String!
  userStatus: UserStatus!
  currentChannelId: ChannelId
  created: Long!
  lastUpdated: Long!
  lastLoggedIn: Long
  wallet: Float!
  deleted: Boolean!
}

type UserEvent {
  user: User!
  userEventType: UserEventType!
}

type UserId {
  value: Int!
}